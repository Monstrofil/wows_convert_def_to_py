#      DO NOT CHANGE THIS FILE     #
# FILE WAS GENERATED AUTOMATICALLY #

from def_generator.events import EventHook
from operator import itemgetter

from def_generator.decorators import unpack_func_args, unpack_variables

{% for arg in entity.implements -%}
{% if entity.interface -%}
from {{arg}} import {{arg}}
{% else -%}
from interfaces.{{arg}} import {{arg}}
{% endif -%}
{% endfor %}


class {{entity.name}}({% if not entity.implements %}object{% endif %}{% for arg in entity.implements %}{{arg}}{% if not loop.last %}, {% endif %}{% endfor %}):
    {% for method in entity.methods %}
    g_{{method.name}} = EventHook()
    {% endfor %}
    def __init__(self):
        self.id = None
        self.position = None

{% for property in entity.properties %}
        self._{{property.name}} = {{property.default_value.__repr__()}}
{% endfor %}

        # MRO fix
{% for arg in entity.implements %}
        {{arg}}.__init__(self)
{% endfor %}
        self._properties = getattr(self, '_properties', [])
        self._properties.extend([
            {% for arg in entity.properties %}({{arg.size}}, '{{arg.name}}'),
            {% endfor %}
        ])
        # sort properties by size
        self._properties.sort(key=itemgetter(0))

        self._methods = getattr(self, '_methods', [])
        self._methods.extend([
            {% for arg in entity.methods %}({{arg.size}}, '{{arg.name}}'),
            {% endfor %}
        ])
        # sort methods by size
        self._methods.sort(key=itemgetter(0))
        return

    @property
    def attributesMap(self):
        d = {}
        for i, (_, name) in enumerate(self._properties):
            d[i] = name
        return d

    @property
    def methodsMap(self):
        d = {}
        for i, (_, name) in enumerate(self._methods):
            d[i] = name
        return d

    ####################################
    #      METHODS
    ####################################

{% for method in entity.methods -%}
    # method size: {{method.size}}
    @unpack_func_args({{method.arguments}})
    def {{method.name}}(self{% if method.arguments %}, {% endif %}{% for arg in method.arguments %}arg{{loop.index}}{% if not loop.last %}, {% endif %}{% endfor %}):
        self.g_{{method.name}}.fire(self{% if method.arguments %}, {% endif %}{% for arg in method.arguments %}arg{{loop.index}}{% if not loop.last %}, {% endif %}{% endfor %})
{% endfor %}

    ####################################
    #       PROPERTIES
    ####################################

{% for property in entity.properties -%}
    # property size: {{property.size}}
    @property
    def {{property.name}}(self):
        return self._{{property.name}}

    @{{property.name}}.setter
    def {{property.name}}(self, value):
        self._{{property.name}}, = unpack_variables(value, {{property.argument}})
{% endfor %}

    def get_summary(self):
        print '~' * 60
        print 'Entity name: ', self.__class__.__name__
        print 'Total entity client properties: {:>5}'.format(len(self._properties))
        print 'Total entity client methods: {:>5}'.format(len(self._methods))

        print
        print 'Listing entity properties:'
        print '{:>4} {:>40}'.format('idx', 'property name')
        for i, p in self.attributesMap.items():
            print '{:>4} {:>40}'.format(i, p)

        print
        print 'Listing entity methods:'
        print '{:>4} {:>40}'.format('idx', 'method name')
        for i, p in self.methodsMap.items():
            print '{:>4} {:>40}'.format(i, p)
        print '~' * 60
        print
        print


    def __repr__(self):
        d = {}
        for _, p in self._properties:
            d[p] = getattr(self, p)
        return "<{}> {}".format(self.__class__.__name__, d)